00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/21/2019 8:28:55 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Dissasembler
00000000                             3  * Written by :  Nick, Shelby, and Zoe
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7          ORG     $1000
00001000                             8          
00001000                             9  ****    MAIN LOOP   ****
00001000                            10  START:  
00001000  43F9 0000108C             11          LEA ST_A_MSG,A1 * load start address prompt message
00001006  103C 000E                 12          MOVE.B  #14,D0  * print start address prompt message
0000100A  4E4F                      13          TRAP    #15
0000100C                            14          
0000100C  43F9 00001074             15          LEA     ST_ADDR,A1 * load start address
00001012  4291                      16          CLR.L   (A1)    * clear long at a1
00001014  103C 0002                 17          MOVE.B  #2,D0   * trap task 2 read a null terminated string from keyboard at A1 length at D1
00001018  4E4F                      18          TRAP    #15
0000101A                            19          
0000101A  4EB9 00001058             20          JSR     IN_ADDR_TO_HEX  * convert address to hex
00001020                            21               
00001020                            22  *        LEA     E_A_MSG,A1 * load end address prompt message
00001020                            23  *        MOVE.B  #14,D0  * print end address prompt message
00001020                            24  *        TRAP    #15
00001020                            25  *        
00001020                            26  *        MOVE.B  #2,D0   * trap task 2 read a null terminated string from keyboard at A1 length at D1
00001020                            27  *        TRAP    #15
00001020                            28          
00001020  60DE                      29          BRA     START 
00001022                            30  
00001022                            31  
00001022                            32  ****    OP-CODES    ****
00001022                            33  
00001022                            34  
00001022                            35  
00001022                            36  ****       EA       ****
00001022                            37  
00001022                            38  
00001022                            39  ***       UTILS     ****
00001022                            40  
00001022  103C 0009                 41  DONE    MOVE.B  #9,D0       * Trap task 9 halt simulator
00001026  4E4F                      42          TRAP    #15
00001028                            43          
00001028                            44  * Converts ASCII string containing chars 0-9 and A-F uppercase to hexidecimal number
00001028                            45  * d1 is string length, will be changed
00001028                            46  TO_HEX
00001028  4282                      47          CLR.L   D2      * clear to hold digit magnitude
0000102A  4283                      48          CLR.L   D3      * clear to hold result
0000102C  5341                      49          SUBI    #1,D1    * subtract 1
0000102E  C2FC 0004                 50          MULU    #4,D1   * multiply length by four to get length in binary
00001032  2449                      51          MOVEA.L A1,A2   * save starting address
00001034                            52  TO_HEX_INTERNAL:
00001034  1019                      53          MOVE.B  (A1)+,D0     * Load char at A1 into D0
00001036  6700 001C                 54          BEQ     END_H       * GOTO end if byte is zero (null terminated)
0000103A  0C40 0039                 55          CMPI    #$39,D0     * compare char value to 39
0000103E  6F00 0004                 56          BLE     _0_9        * GOTO 0_9 if <= 39
00001042  5F00                      57  A_F     SUBI.B  #$7,D0      * Subtract 7 from D0) for ASCII A-F
00001044  0400 0030                 58  _0_9    SUBI.B  #$30,D0     * Subtract $30 to convert to hexidecimal
00001048  7401                      59          MOVEQ  #1,D2        * put 1 in D2
0000104A  E3AA                      60          LSL.L   D1,D2       * shift 1 to hex digit final postion
0000104C  C4C0                      61          MULU    D0,D2       
0000104E  D682                      62          ADD.L   D2,D3       * add to hex result
00001050  5941                      63          SUBI    #4,D1       * subract one hex digit of bits from remaining length 
00001052  60E0                      64          BRA     TO_HEX_INTERNAL   * convert next byte
00001054  2483                      65  END_H   MOVE.L  D3,(A2)
00001056  4E75                      66          RTS
00001058                            67  
00001058                            68  
00001058                            69  *   input address to hexadecimal
00001058                            70  IN_ADDR_TO_HEX:
00001058  B27C 0008                 71          CMP     #8,D1   * compare string input length to 8
0000105C  6E00 0008                 72          BGT     PADDR_IN_ERR    * if input greater than 8 bytes print input address error
00001060  4EB8 1028                 73          JSR     TO_HEX          * else convert to hex
00001064  4E75                      74          RTS
00001066                            75          
00001066                            76          
00001066                            77  *   print address input error
00001066                            78  PADDR_IN_ERR: 
00001066  43F9 000010EB             79          LEA     ADR_IN_ERR,A1   * load address unput error message 
0000106C  103C 000E                 80          MOVE.B  #14,D0          * dispay message
00001070  4E4F                      81          TRAP    #15
00001072  608C                      82          BRA     START           * return to start of program
00001074                            83          
00001074                            84  ****    VARS    ****
00001074                            85  ST_ADDR DS.L    3   * allocate 3 longs for address ascii input needs 9 bytes to get 8 chars 
00001080                            86  E_ADDR  DS.L    3   * and null terminator, allocating 12 bytes to account for this
0000108C                            87          
0000108C                            88  ****    CONST   ****
0000108C  =0000000D                 89  CR          EQU     $0D     * carraige return          
0000108C  =0000000A                 90  LF          EQU     $0A     * line feed 
0000108C                            91  
0000108C                            92  ****    MESSAGES    ****
0000108C= 56 61 6C 69 64 20 ...     93  ST_A_MSG    DC.B    'Valid address chars: 0123456789ABCDEF (uppercase only)',CR,LF  * start address message
000010C4= 45 6E 74 65 72 20 ...     94              DC.B    'Enter start address:',0    
000010D9= 45 6E 74 65 72 20 ...     95  E_A_MSG     DC.B    'Enter end address',0    * end address message
000010EB                            96  
000010EB= 45 52 52 4F 52 20 ...     97  ADR_IN_ERR  DC.B    'ERROR INVALID ADDRESS: input must be 0-8 hexidecimal digits long',CR,LF,0    * address input error message
0000112E                            98  
0000112E                            99              
0000112E                           100              END     START        * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADR_IN_ERR          10EB
A_F                 1042
CR                  D
DONE                1022
END_H               1054
E_ADDR              1080
E_A_MSG             10D9
IN_ADDR_TO_HEX      1058
LF                  A
PADDR_IN_ERR        1066
START               1000
ST_ADDR             1074
ST_A_MSG            108C
TO_HEX              1028
TO_HEX_INTERNAL     1034
_0_9                1044
